package de.marx_software.webtools.core.modules.entities;

/*-
 * #%L
 * webtools-entities
 * %%
 * Copyright (C) 2016 - 2018 Thorsten Marx
 * %%
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 * #L%
 */

import de.marx_software.webtools.api.entities.Entities;
import de.marx_software.webtools.api.entities.Result;
import de.marx_software.webtools.api.entities.Store;
import de.marx_software.webtools.api.entities.criteria.Restrictions;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import org.assertj.core.api.Assertions;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 *
 * @author marx
 */
public class ReopenTest {

	Entities entities;

	private String id;
	
	private String dbname = "./target/db-" + System.currentTimeMillis();
	
	@BeforeMethod
	public void before() {
		System.out.println("start entities");
		File file = new File(dbname);
		file.mkdirs();
		entities = new EntitiesImpl(file);
		((EntitiesImpl) entities).open();
	}

	@AfterMethod
	public void shutdown() throws Exception {
		System.out.println("stop entities");
		((EntitiesImpl) entities).close();
	}

	@Test
	public void init_some_data() {
		Store<Content> store = entities.store(Content.class);

		Content c = new Content().setVorname("Thorsten");
		id = store.save(c);
		
		Result<Content> list = store.list(0, Integer.MAX_VALUE);
		list.forEach((content) -> {
			System.out.println(content.getId());
			Assertions.assertThat(content.getId()).isNotBlank();
		});
	}

	@Test(dependsOnMethods = "init_some_data")
	public void test_id_after_reopen() {
		Store<Content> store = entities.store(Content.class);

		Result<Content> list = store.list(0, Integer.MAX_VALUE);
		list.forEach((content) -> {
			System.out.println(content.getId());
			Assertions.assertThat(content.getId()).isNotBlank();
		});
	}

}
